<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Jack Baker</title>
    <link>https://jackbakerds.com/tags/r/</link>
    <description>Recent content in R on Jack Baker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 08 May 2021 13:17:00 +0100</lastBuildDate><atom:link href="https://jackbakerds.com/tags/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Upweighting your recent observations in regression and classification</title>
      <link>https://jackbakerds.com/posts/upweight-recent-observations-regression-classification/</link>
      <pubDate>Sat, 08 May 2021 13:17:00 +0100</pubDate>
      
      <guid>https://jackbakerds.com/posts/upweight-recent-observations-regression-classification/</guid>
      <description>&lt;p&gt;COVID-19 has changed many established patterns. We&amp;rsquo;re all having to adjust to a new normal: how do we get our data science models to adjust as well?&lt;/p&gt;
&lt;p&gt;COVID aside, in any regression or classification problem where observations have a time element, old patterns can become stale. For this reason, I&amp;rsquo;m often asking myself &amp;ndash; how do I upweight my most recent observations? In this post I explain how to do this.&lt;/p&gt;
&lt;p&gt;All the code in this tutorial is available as a &lt;a href=&#34;https://github.com/jackcbaker/blog-notebooks/blob/main/regression-forgetting.ipynb&#34;&gt;jupyter notebook&lt;/a&gt; on my &lt;a href=&#34;https://github.com/jackcbaker/&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;step-1-fetch-the-data&#34;&gt;
  Step 1: Fetch the data
  &lt;a class=&#34;heading-link&#34; href=&#34;#step-1-fetch-the-data&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;For this post I&amp;rsquo;ll be using data from the great &lt;a href=&#34;https://coronavirus.data.gov.uk/&#34;&gt;UK government COVID dashboard&lt;/a&gt;. The data and plots from this website are readily available as part of the &lt;a href=&#34;https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/&#34;&gt;Open Government Licence v3.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For this tutorial, we&amp;rsquo;ll be using two measurements from the dashboard: &lt;a href=&#34;https://coronavirus.data.gov.uk/details/cases&#34;&gt;&amp;lsquo;People tested positive&amp;rsquo;&lt;/a&gt; (I&amp;rsquo;ll call this positive tests) and &lt;a href=&#34;https://coronavirus.data.gov.uk/details/deaths&#34;&gt;&amp;lsquo;Deaths within 28 days of positive test&amp;rsquo;&lt;/a&gt; (I&amp;rsquo;ll call this deaths).&lt;/p&gt;
&lt;p&gt;The plotted data as it appeared on the dashboard at the time of writing is below. We can see that for the recent data, positive tests seems to have a strong relationship with deaths; but that at the start of the pandemic - when less testing was being performed - the relationship does not look as strong.&lt;/p&gt;

&lt;figure &gt;
    &lt;style scoped&gt;
        .center {
            display: block;
            margin-left: auto;
            margin-right: auto;
        }
    &lt;/style&gt;
    
        &lt;img src=&#34;https://jackbakerds.com/post_images/upweight-recent-observations/dashboard_snip.png&#34; alt=&#34;Image of government dashboard of positive tests and deaths&#34; class=&#34;center&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Government Dashboard of positive tests and deaths OGLv3.0.
        &lt;a href=&#34;https://coronavirus.data.gov.uk/&#34;&gt; 
            Link to dashboard.
        &lt;/a&gt; 
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;p&gt;This suggests a pattern that has changed through time: this is something where we want to give more weight to new observations.&lt;/p&gt;
&lt;p&gt;To investigate this, let&amp;rsquo;s first fetch both the datasets and combine them based on the date:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#75715e&#34;&gt;# We&amp;#39;ll need this later...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; LinearRegression

positive_tests &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://coronavirus.data.gov.uk/api/v1/data?filters=areaType=overview&amp;amp;structure=%7B%22areaType%22:%22areaType%22,%22areaName%22:%22areaName%22,%22areaCode%22:%22areaCode%22,&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%22d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ate%22:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%22d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ate%22,%22newCasesBySpecimenDate%22:%22newCasesBySpecimenDate%22,&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%22c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;umCasesBySpecimenDate%22:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%22c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;umCasesBySpecimenDate&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%22%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7D&amp;amp;format=csv&amp;#34;&lt;/span&gt;)
num_deaths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://coronavirus.data.gov.uk/api/v1/data?filters=areaType=overview&amp;amp;structure=%7B%22areaType%22:%22areaType%22,%22areaName%22:%22areaName%22,%22areaCode%22:%22areaCode%22,&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%22d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ate%22:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%22d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ate%22,%22newDeaths28DaysByDeathDate%22:%22newDeaths28DaysByDeathDate%22,&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%22c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;umDeaths28DaysByDeathDate%22:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%22c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;umDeaths28DaysByDeathDate&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%22%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7D&amp;amp;format=csv&amp;#34;&lt;/span&gt;)
positive_tests[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;positive_tests&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; positive_tests[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;newCasesBySpecimenDate&amp;#39;&lt;/span&gt;]
num_deaths[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;num_deaths&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num_deaths[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;newDeaths28DaysByDeathDate&amp;#39;&lt;/span&gt;]
covid_uk_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num_deaths[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;num_deaths&amp;#39;&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;merge(positive_tests[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;positive_tests&amp;#39;&lt;/span&gt;]], on&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;)
covid_uk_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_datetime(covid_uk_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;])
&lt;span style=&#34;color:#75715e&#34;&gt;# Check there&amp;#39;s not duplicates&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; len(set(covid_uk_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;])) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(covid_uk_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;])
covid_uk_df&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;num_deaths&lt;/th&gt;
      &lt;th&gt;positive_tests&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2021-05-05&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;2229&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2021-05-04&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;2524&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2021-05-03&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;2145&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2021-05-02&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;1502&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2021-05-01&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;1388&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;425&lt;/th&gt;
      &lt;td&gt;2020-03-06&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;81&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;426&lt;/th&gt;
      &lt;td&gt;2020-03-05&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;427&lt;/th&gt;
      &lt;td&gt;2020-03-04&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;56&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;428&lt;/th&gt;
      &lt;td&gt;2020-03-03&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;56&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;429&lt;/th&gt;
      &lt;td&gt;2020-03-02&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;39&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;430 rows × 3 columns&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;step-2-adding-weights&#34;&gt;
  Step 2: Adding weights
  &lt;a class=&#34;heading-link&#34; href=&#34;#step-2-adding-weights&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Now we need to decide how to weight the observations. There are lots of options here, which is a bit confusing.&lt;/p&gt;
&lt;p&gt;I tend to use the same weights as used in &lt;a href=&#34;https://otexts.com/fpp3/ses.html&#34;&gt;exponential smoothing models&lt;/a&gt;. Why? Exponential smoothing is a popular, simple forecasting method that has been around for over 60 years! It&amp;rsquo;s tried and tested, and has not gone away.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s set \(T\) to be the time of the most recent observation, \(t\) to be the time of the observation we&amp;rsquo;re interested in, and \(\gamma\) to be a hyperparameter we pick that&amp;rsquo;s between 0 and 1. Then I set my weights \(w\) to be&lt;/p&gt;
&lt;p&gt;\[
w = \gamma^{[T-t]}.
\]&lt;/p&gt;
&lt;p&gt;What does this mean? Suppose we set \(\gamma = 0.95\). Then if my observation is made at the most recent time point, its weight will be 1. If it&amp;rsquo;s made at the second most recent time point, its weight will be 0.95. If it&amp;rsquo;s made at the 10th most recent time point, its weight will be \(\gamma^{10} = 0.95^{10} \approx 0.6\). Essentially our weight smoothly decreases to nothing as the observation gets older and older.&lt;/p&gt;
&lt;p&gt;An unfortunate side effect to this is we&amp;rsquo;ve added a hyperparameter to tune. I often just quickly do this by eye looking at the data, but you can also tune this in the normal way using cross-validation or AIC/BIC. For this tutorial, I&amp;rsquo;ll just set it to 0.9.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s add weights to our data now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Set hyperparam&lt;/span&gt;
gamma &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.9&lt;/span&gt;
most_recent_date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; covid_uk_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max()
days_before_recent_date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (most_recent_date &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; covid_uk_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;days
covid_uk_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weight&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gamma &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; days_before_recent_date&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values
covid_uk_df
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;num_deaths&lt;/th&gt;
      &lt;th&gt;positive_tests&lt;/th&gt;
      &lt;th&gt;weight&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2021-05-05&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;2229&lt;/td&gt;
      &lt;td&gt;1.000000e+00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2021-05-04&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;2524&lt;/td&gt;
      &lt;td&gt;9.000000e-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2021-05-03&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;2145&lt;/td&gt;
      &lt;td&gt;8.100000e-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2021-05-02&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;1502&lt;/td&gt;
      &lt;td&gt;7.290000e-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2021-05-01&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;1388&lt;/td&gt;
      &lt;td&gt;6.561000e-01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;425&lt;/th&gt;
      &lt;td&gt;2020-03-06&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;81&lt;/td&gt;
      &lt;td&gt;3.573276e-20&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;426&lt;/th&gt;
      &lt;td&gt;2020-03-05&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;3.215948e-20&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;427&lt;/th&gt;
      &lt;td&gt;2020-03-04&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;56&lt;/td&gt;
      &lt;td&gt;2.894353e-20&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;428&lt;/th&gt;
      &lt;td&gt;2020-03-03&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;56&lt;/td&gt;
      &lt;td&gt;2.604918e-20&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;429&lt;/th&gt;
      &lt;td&gt;2020-03-02&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;39&lt;/td&gt;
      &lt;td&gt;2.344426e-20&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;430 rows × 4 columns&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;step-3-fit-your-model&#34;&gt;
  Step 3: Fit your model
  &lt;a class=&#34;heading-link&#34; href=&#34;#step-3-fit-your-model&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;You might think that fitting our model will become a challenge now we&amp;rsquo;ve added weights. It&amp;rsquo;s actually dead easy.&lt;/p&gt;
&lt;p&gt;Most regression and classification algorithms allow you to provide a dataset weight: for tree based methods (sklearn random forest, xgboost, lightgbm), you just set the &lt;code&gt;sample_weight&lt;/code&gt; in the &lt;code&gt;fit&lt;/code&gt; function; for linear regression R&amp;rsquo;s &lt;code&gt;lm&lt;/code&gt; function has a &lt;code&gt;weights&lt;/code&gt; argument, sklearn&amp;rsquo;s &lt;code&gt;LinearRegression&lt;/code&gt; has a &lt;code&gt;sample_weight&lt;/code&gt; argument in the &lt;code&gt;fit&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;If your algorithm does not allow you to set a weight, you can borrow from the class imbalance techniques and &lt;a href=&#34;https://machinelearningmastery.com/random-oversampling-and-undersampling-for-imbalanced-classification/&#34;&gt;oversample/undersample&lt;/a&gt; your observations based on your weights.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s fit our model using sklearn&amp;rsquo;s linear regression:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;weighted_model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LinearRegression()
weighted_results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; weighted_model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(
    X&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;covid_uk_df[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;positive_tests&amp;#39;&lt;/span&gt;]],
    y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;covid_uk_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;num_deaths&amp;#39;&lt;/span&gt;], 
    sample_weight&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;covid_uk_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weight&amp;#39;&lt;/span&gt;]
)
&lt;span style=&#34;color:#75715e&#34;&gt;# Return the R^2 score for our model&lt;/span&gt;
r2_weighted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; weighted_results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;score(
    X&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;covid_uk_df[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;positive_tests&amp;#39;&lt;/span&gt;]],
    y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;covid_uk_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;num_deaths&amp;#39;&lt;/span&gt;], 
    sample_weight&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;covid_uk_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;weight&amp;#39;&lt;/span&gt;]
)
f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R^2 score for the weighted model is {r2_weighted}&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&#39;R^2 score for the weighted model is 0.5247115256308429&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s compare this to an unweighted model:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;unweighted_model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LinearRegression()
unweighted_results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; weighted_model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(
    X&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;covid_uk_df[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;positive_tests&amp;#39;&lt;/span&gt;]],
    y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;covid_uk_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;num_deaths&amp;#39;&lt;/span&gt;]
)
&lt;span style=&#34;color:#75715e&#34;&gt;# Return the R^2 score for our model&lt;/span&gt;
r2_unweighted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unweighted_results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;score(
    X&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;covid_uk_df[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;positive_tests&amp;#39;&lt;/span&gt;]],
    y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;covid_uk_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;num_deaths&amp;#39;&lt;/span&gt;]
)
f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R^2 score for the unweighted model is {r2_unweighted}&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&#39;R^2 score for the unweighted model is 0.39299060569674615&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case we&amp;rsquo;ve improved our in-sample fit significantly. Since regular testing is likely to continue in the UK, our weighted model should provide better out-of-sample predictions as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A python equivalent for R markdown</title>
      <link>https://jackbakerds.com/posts/python-equivalent-rmarkdown/</link>
      <pubDate>Tue, 04 May 2021 20:20:00 +0100</pubDate>
      
      <guid>https://jackbakerds.com/posts/python-equivalent-rmarkdown/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://rmarkdown.rstudio.com/&#34;&gt;R markdown&lt;/a&gt; is a powerful tool for sharing insights with stakeholders. You can write snippets of R code that generate plots. This can then be compiled to a HTML or pdf file that you can share with non-technical stakeholders.&lt;/p&gt;
&lt;p&gt;This is not as straightforward in python. Yes, Jupyter notebooks are a great way of sharing analysis with other developers. But compiling to HTML/pdf, with code snippets removed, that looks nice enough for a non-technical stakeholder, I&amp;rsquo;ve found clunky using Jupyter notebooks. R markdown also has great tools to generate &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown-cookbook/kable.html&#34;&gt;nice looking tables&lt;/a&gt;, not just plots.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been working with a python heavy team though, so have been trying to figure out how to generate R markdown style documents. In this post I&amp;rsquo;ll outline what I&amp;rsquo;ve been using to generate HTML reports in python, that look nice enough to share with non-technical stakeholders. The process uses a few tools.&lt;/p&gt;
&lt;h2 id=&#34;step-1-embedding-plots-in-html&#34;&gt;
  Step 1: Embedding Plots in HTML
  &lt;a class=&#34;heading-link&#34; href=&#34;#step-1-embedding-plots-in-html&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;The first step is to embed plots into a static HTML that you can then share with others. A great tool for this is &lt;a href=&#34;https://plotly.com/python/&#34;&gt;plotly&lt;/a&gt;. Plotly has a &lt;a href=&#34;https://plotly.com/python-api-reference/generated/plotly.io.to_html.html&#34;&gt;&lt;code&gt;to_html&lt;/code&gt; function&lt;/a&gt; (one of my amazing colleagues found this) which will write the plots as a HTML string, which you can then write to a file.&lt;/p&gt;
&lt;p&gt;Plotly graphs look the part, and they allow the user to hover over the points to see what the values are; I&amp;rsquo;ve found this goes down well with customers.&lt;/p&gt;
&lt;p&gt;Sometimes users need plots they can copy-paste though. In this case I recommend using python&amp;rsquo;s more standard plotting libraries, like &lt;a href=&#34;https://seaborn.pydata.org/&#34;&gt;seaborn&lt;/a&gt; or &lt;a href=&#34;https://matplotlib.org/&#34;&gt;matplotlib&lt;/a&gt;. To embed the image into HTML without needing to have a separate image file the HTML references is a bit more involved. But you can do it by encoding the image as base64 and writing directly to your HTML. Just follow the instructions in this &lt;a href=&#34;https://stackoverflow.com/questions/48717794/matplotlib-embed-figures-in-auto-generated-html&#34;&gt;stackoverflow post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;step-2-setting-the-layout-of-the-html-document&#34;&gt;
  Step 2: Setting the Layout of the HTML Document
  &lt;a class=&#34;heading-link&#34; href=&#34;#step-2-setting-the-layout-of-the-html-document&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Great, now you can embed plots in HTML, and actually if you turn off the &lt;code&gt;full_html&lt;/code&gt; option in plotly&amp;rsquo;s &lt;code&gt;to_html&lt;/code&gt; function, you can write as many plotly plots as you like to a html file by just appending the strings.&lt;/p&gt;
&lt;p&gt;But what about layout, commentary, and tables of data? This is where I use python&amp;rsquo;s HTML templating libraries &amp;ndash; which allow you to use python to generate static HTML files from templates. This technique is powerful, and used in python backend development libraries like &lt;a href=&#34;https://flask.palletsprojects.com/en/1.1.x/&#34;&gt;flask&lt;/a&gt; and &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;django&lt;/a&gt;. It&amp;rsquo;s quick to learn, but does require some knowledge of HTML.&lt;/p&gt;
&lt;p&gt;I use the &lt;a href=&#34;https://jinja.palletsprojects.com/en/2.11.x/&#34;&gt;Jinja&lt;/a&gt; library to generate my HTML reports (it&amp;rsquo;s one of the most popular HTML templating libraries in python).&lt;/p&gt;
&lt;h2 id=&#34;step-3-making-the-report-look-nice&#34;&gt;
  Step 3: Making the Report Look Nice
  &lt;a class=&#34;heading-link&#34; href=&#34;#step-3-making-the-report-look-nice&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;For anyone that&amp;rsquo;s worked with HTML before you&amp;rsquo;ll know it takes a long time to make anything which looks presentable.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t want to spend much time on this because I wanted to generate the report as quick as possible. So I used the &lt;a href=&#34;https://getbootstrap.com/&#34;&gt;bootstrap&lt;/a&gt; CSS library. This tool allows you to make your report look nice in a short amount of time (all I tend to do is wrap everything in a &lt;code&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;&lt;/code&gt; and maybe add some padding).&lt;/p&gt;
&lt;p&gt;Bootstrap is basically a set of prebuilt HTML classes you can use to format your HTML. For example to make an HTML table look nice in bootstrap it&amp;rsquo;s as simple as &lt;code&gt;&amp;lt;table class=&amp;quot;table&amp;quot;&amp;gt;&lt;/code&gt; (tables look quite ugly in standard HTML). You can add padding at the top of a title element by adding &lt;code&gt;&amp;lt;h1 class=&amp;quot;pt-1&amp;quot;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;thoughts&#34;&gt;
  Thoughts
  &lt;a class=&#34;heading-link&#34; href=&#34;#thoughts&#34;&gt;
    &lt;i class=&#34;fa fa-link&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;As you can see, this is a fiddlier process than with R markdown (if anyone has a better way, please get in touch!). But the tools are useful to learn, especially Jinja and bootstrap which are standard tools for web development. Once you&amp;rsquo;ve learnt the libraries, and have some pre-made templates ready to go, the process gets quite quick.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>