<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jack Baker</title>
    <link>http://jackcbaker.github.io/posts/</link>
    <description>Recent content in Posts on Jack Baker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 17 Apr 2021 15:36:34 +0100</lastBuildDate><atom:link href="http://jackcbaker.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to move your data science solution into a hands off state?</title>
      <link>http://jackcbaker.github.io/posts/data-science-solution-to-hands-off-state/</link>
      <pubDate>Sat, 17 Apr 2021 15:36:34 +0100</pubDate>
      
      <guid>http://jackcbaker.github.io/posts/data-science-solution-to-hands-off-state/</guid>
      <description>Once you&amp;rsquo;ve developed a data science solution it&amp;rsquo;s easy to tinker with it indefinitely: running it manually, making small changes to the output, iterating on the model. This is not ideal - once you have a solution you&amp;rsquo;re happy with ideally you should be able to leave it running with minimal input from you, unless something falls over. Whether you&amp;rsquo;re handing over to a support team, or will be supporting the tool yourself, this post gives some tips when you&amp;rsquo;re trying to move your solution into a hands-off state - or putting it into production.</description>
    </item>
    
    <item>
      <title>How to tell your data science pipeline is actually working?</title>
      <link>http://jackcbaker.github.io/posts/check-data-science-pipeline-working/</link>
      <pubDate>Sun, 11 Apr 2021 15:36:34 +0100</pubDate>
      
      <guid>http://jackcbaker.github.io/posts/check-data-science-pipeline-working/</guid>
      <description>I&amp;rsquo;ve been there - studying model output for hours to check a model is working. There&amp;rsquo;s some better ways than this. For example designing backtests to check a model does better than a baseline. The trouble with these methods is they don&amp;rsquo;t categorically show that a model doing exactly as it is designed to do; they&amp;rsquo;re also not automated, or (as with a backtest) are expensive to run; and sometimes they&amp;rsquo;re harder to design than the model itself!</description>
    </item>
    
    <item>
      <title>How to include libraries in your project while also editing them</title>
      <link>http://jackcbaker.github.io/posts/include-libraries-project-editing/</link>
      <pubDate>Tue, 06 Apr 2021 18:29:47 +0100</pubDate>
      
      <guid>http://jackcbaker.github.io/posts/include-libraries-project-editing/</guid>
      <description>I came across this issue the other day: I wanted to include a library in a project, but to make it work in my code I would have to edit it. I then needed to write those changes back to the original library, with minimal faff. This post explains the best way I found of doing this.
An obvious solution is to include the whole codebase of the library into your project.</description>
    </item>
    
  </channel>
</rss>
